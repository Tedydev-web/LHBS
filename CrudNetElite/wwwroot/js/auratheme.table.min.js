function attachLoadingToTable(e) { var t = document.createElement("div"); t.className = "position-absolute top-50 start-50 translate-middle text-center"; var o = document.createElement("div"); o.className = "spinner-border", o.setAttribute("role", "status"); var a = document.createElement("span"); a.className = "visually-hidden", a.textContent = "Loading...", o.appendChild(a), t.appendChild(o), e.querySelector("table").parentNode.appendChild(t) } function findParentWithAttribute(e, t) { let o = e; for (; null !== o;) { if (o.hasAttribute(t)) return o; o = o.parentNode } return null } function sortTable(e, t) { let o = findParentWithAttribute(t, "data-loadtable"); o.setAttribute("data-table-sort", e), attachLoadingToTable(o), refreshTable(o) } function searchTable(e) { let t = findParentWithAttribute(e, "data-loadtable"), o = t.querySelector("input.searchtable[name='search']"); t.setAttribute("data-table-search", o.value), attachLoadingToTable(t), refreshTable(t) } function resetTable(e) { let t = findParentWithAttribute(e, "data-loadtable"); emptyTableActionsObject(t), attachLoadingToTable(t), refreshTable(t); let o = t.querySelector("input.searchtable[name='search']"); null != o && (o.value = ""); const a = t.querySelectorAll(".dropdown"); null != a && a.forEach(e => { const t = e.querySelector(".dropdown-menu input"); null != t && (t.value = ""); for (var o = e.querySelector("ul"), a = Array.prototype.filter.call(o.children, function (e) { return e }), n = 0; n < a.length; n++)a[n].style.display = "block"; const r = e.querySelector(".dropdown-item.active"); null != r && r.classList.remove("active"); const l = e.querySelector(".dropdown-toggle"); if (null != l) { const t = e.querySelector("button").getAttribute("placeholder"); l.textContent = null != t ? t : "Please Select"; const o = document.querySelector(".dropdown-item"); null != o && "Show 10 Records" === o.innerText.trim() && o.classList.add("active") } const i = e.querySelector("input.dropdown-input"); null != i && (i.value = "") }) } function changePage(e, t) { let o = findParentWithAttribute(t, "data-loadtable"); o.setAttribute("data-table-pg", e), refreshTable(o) } function onChangeTableLength(e) { let t = e.getAttribute("data-value"), o = findParentWithAttribute(e, "data-loadtable"); o.setAttribute("data-table-size", t), attachLoadingToTable(o), refreshTable(o); var a = e.closest("ul"); console.log(a), a.querySelectorAll("li").forEach(function (e) { let t = e.querySelector("a"); t && t.classList.remove("active") }), e.classList.add("active"), e.closest(".dropdown").querySelector("button").textContent = e.textContent } function getTableActionsObject(e) { for (var t = e.attributes, o = {}, a = 0; a < t.length; a++) { if (0 === t[a].name.indexOf("data-table")) o[t[a].name.replace("data-table-", "")] = t[a].value } return o } function emptyTableActionsObject(e) { for (var t = e.attributes, o = 0; o < t.length; o++)0 === t[o].name.indexOf("data-table") && e.setAttribute(t[o].name, "") } function refreshTable(e) { loadData(e.getAttribute("data-loadtable"), getTableActionsObject(e), e.id) } function loadData(e, t, o) { fetch(e, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(t) }).then(e => { if (!e.ok) throw new Error("Network response was not ok"); return e.text() }).then(e => { document.querySelector(`#${o} .toRenderTable`).innerHTML = e }).catch(e => { console.error("There was a problem with the fetch operation:", e) }).finally(() => { }) } function openConfirmationModal(e, t, o, a) { new bootstrap.Modal(document.getElementById("confirmDeleteModal")).show(); var n = document.querySelector("#confirmed-deletebtn"), r = document.querySelector("#record-title"), l = document.querySelector("#areyousure-heading"), i = document.querySelector("#information"); if (r) { let t = e.replace("&#39;", "'"); r.textContent = t.replace("&#34;", '"') } l && (l.textContent = "" == o || null == o ? "Permanently delete this record?" : o), i && (i.textContent = "" == a || null == a ? "Deleting is permanent and can't be undone. Are you sure you to proceed?" : a), n && n.addEventListener("click", () => { window.location = t }) } function getCurrentDateTimeForFileName() { const e = new Date; return `${e.getFullYear()}${String(e.getMonth() + 1).padStart(2, "0")}${String(e.getDate()).padStart(2, "0")}${String(e.getHours()).padStart(2, "0")}${String(e.getMinutes()).padStart(2, "0")}${String(e.getSeconds()).padStart(2, "0")}` } !function () { const e = document.querySelectorAll("div[data-loadtable]"); e.length > 0 && e.forEach(e => { if (e) { let t = e.querySelector("input.searchtable[name='search']"); t && t.addEventListener("keydown", function (o) { "Enter" === o.key && (e.setAttribute("data-table-search", t.value), refreshTable(e)) }), loadData(e.getAttribute("data-loadtable"), getTableActionsObject(e), e.id) } }) }(); let tableNotFoundMessage = "The table is still loading. Please click on the button again after the table is fully loaded."; function exportToExcel(e) { let t = document.getElementById(e); $(".dropdown-menu").remove(); var o = t.querySelector("table"); if (null != o) { var a = XLSX.utils.table_to_book(o), n = a.SheetNames[0], r = a.Sheets[n]; o.querySelectorAll("th.notexport").forEach(e => { for (var t = e.cellIndex, o = XLSX.utils.decode_range(r["!ref"]), a = o.s.r; a <= o.e.r; a++) { var n = XLSX.utils.encode_cell({ r: a, c: t }); delete r[n] } }), XLSX.writeFile(a, `${t.getAttribute("data-filename")}-${getCurrentDateTimeForFileName()}.xlsx`), window.location.href = window.location.href } else $("#notificationToast .toast-body").text(tableNotFoundMessage), $("#notificationToast-container").show(), $("#notificationToast").addClass("show") } function exportToCsv(e) { let t = document.getElementById(e); $(".dropdown-menu").remove(); var o = t.querySelector("table"); if (null != o) { var a = XLSX.utils.table_to_book(o), n = a.SheetNames[0], r = a.Sheets[n]; return o.querySelectorAll("th.notexport").forEach(e => { for (var t = e.cellIndex, o = XLSX.utils.decode_range(r["!ref"]), a = o.s.r; a <= o.e.r; a++) { var n = XLSX.utils.encode_cell({ r: a, c: t }); delete r[n] } }), XLSX.writeFile(a, `${t.getAttribute("data-filename")}-${getCurrentDateTimeForFileName()}.csv`), window.location.href = window.location.href, !0 } return $("#notificationToast .toast-body").text(tableNotFoundMessage), $("#notificationToast-container").show(), $("#notificationToast").addClass("show"), !1 } function exportToPdf(e, t) { let o = document.getElementById(e); var a = o.querySelector("table"); if (null != a) { var n = []; a.querySelectorAll("th:not(.notexport)").forEach(function (e) { "" != e.innerText.trim() && n.push({ text: e.innerText, style: "tableHeader" }) }); var r = []; a.querySelectorAll("tbody tr").forEach(function (e) { if (!e.querySelector("td[colspan]")) { var t = []; e.querySelectorAll("td:not(.notexport)").forEach(function (e) { e.innerHTML.includes("actioncol") || t.push(e.innerText.trim()) }), r.push(t) } }); var l = []; n.forEach(function (e) { l.push("auto") }); var i = { pageOrientation: 1 == t || "True" == t || "true" == t ? "portrait" : "landscape", content: [{ table: { headerRows: 1, widths: l, body: [n].concat(r), style: "tableStyle" } }], styles: { tableHeader: { bold: !0, fontSize: 12, color: "black", alignment: "center" }, tableStyle: { margin: [0, 5, 0, 15], fontSize: 9 } } }; pdfMake.createPdf(i).download(`${o.getAttribute("data-filename")}-${getCurrentDateTimeForFileName()}.pdf`) } else $("#notificationToast .toast-body").text(tableNotFoundMessage), $("#notificationToast-container").show(), $("#notificationToast").addClass("show") } function exportToDocx(e, t) { let o = document.getElementById(e), a = o.textContent; t && (a = o.querySelector("tbody").textContent); const n = a.split("\n").map(e => e.trim()).filter(e => "" !== e).map(e => new docx.Paragraph({ children: [new docx.TextRun({ text: e, size: 24 })] })), r = new docx.Document({ sections: [{ properties: {}, children: n }] }); return docx.Packer.toBlob(r).then(e => { saveAs(e, `${o.getAttribute("data-filename")}-${getCurrentDateTimeForFileName()}.docx`) }), !0 } function exportToTxt(e, t) { let o = document.getElementById(e), a = o.textContent; t && (a = o.querySelector("tbody").textContent), a = a.split("\n").map(e => e.trim()).filter(e => "" !== e).join("\n"); let n = new Blob([a], { type: "text/plain" }), r = `${document.getElementById(e).getAttribute("data-filename")}-${getCurrentDateTimeForFileName()}.txt`; if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(n, r); else { let e = document.createElement("a"); if (void 0 !== e.download) { let t = URL.createObjectURL(n); e.setAttribute("href", t), e.setAttribute("download", r), e.style.visibility = "hidden", document.body.appendChild(e), e.click(), document.body.removeChild(e), URL.revokeObjectURL(t) } } }